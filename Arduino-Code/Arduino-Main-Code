#include "SparkFun_Displacement_Sensor_Arduino_Library.h" // Sensor library
#include <SPI.h> // I2C libraries
#include <Wire.h>
#include <Adafruit_GFX.h> // Libraries for display
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3D //Address; 0x3D for 128x64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET); // Create display object
ADS myFlexSensor1; //Create object of the ADS class
ADS myFlexSensor2;

byte deviceType; //Keeps track of if this sensor is a one axis or two axis sensor

// Pin assignments
int buttonPin = A4;
int ledPin = A3;

// Start-up code variable declarations
int holdTime = 3000; // Set required hold time for button hold
int tapTime = 250;
long pressTime = 0; // Set start/hold time at 0 to prevent it from being reached without setting the value
long startTime = 0; 
int currentState = 1; // Set both current and last button state to 1 (OFF)
int lastState = 1;
int i = 1; // Variable for keeping track of the first run through the main loop

float diameter = 00.00; // Initialize diameter and angle variables
float angle = 00.00;
float minDiam = 0; // Choose some min and max values for diameter to convert floats to bytes
float maxDiam = 10.5;
float stepDiam = (maxDiam - minDiam)/256; // Create a step size to convert floats to bytes
ring1 = 4; // Included calibration ring values
ring2 = 6;
int cell = 0; // What cell of EEPROM we store to

// HARD CODE FINGER LENGTHS
float finger1 = 7.5; // Choosing this based on averages
float finger2 = 8.5;

void setup() {
  Serial.begin(9600); // Initiate serial communication
  while (!Serial) // Wait for serial to start
    ; 

  Wire.begin(); // Initiate I2C
  pinMode(buttonPin, INPUT_PULLUP); // Set button pin to internal pull-up
  pinMode(ledPin, OUTPUT); // Set LED pin to output

  if (myFlexSensor1.begin(45) == false){ // Check for a sensor existing
    Serial.println(F("No sensor 1 detected. Check wiring. Freezing..."));
    while (1); // If not, completely freeze
  }

  if (myFlexSensor2.begin(19) == false){ // Repeat for the other sensor
    Serial.println(F("Second sensor not detected. Check wiring. Freezing..."));
    while (1); // If  not, completely freeze
  }

  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) { // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

  deviceType = myFlexSensor1.getDeviceType(); // Check for one axis sensor (important for library)

  // IF YOU TAKE THESE LINES OUT IT BREAKS?????????
  if (deviceType == ADS_ONE_AXIS) {
    Serial.println(F("One axis displacement sensor detected"));}
}

void loop() {

 if (i == 1) {  // Welcome message to run once
    display.clearDisplay(); 
    display.setTextSize(3); // Larger 3:1 pixel scale for font size
    display.setTextColor(SSD1306_WHITE); // Draw white text (this is a monochrome screen)
    display.setCursor(2,16); display.print(F("Welcome"));
    display.drawLine(0,40,128,40,SSD1306_WHITE); // Underline "Welcome"
    display.display(); // Update display
    digitalWrite(ledPin, HIGH); // Blink LED three times, 0.5 seconds per on/off
    delay(500);
    digitalWrite(ledPin, LOW);
    delay(500);
    digitalWrite(ledPin, HIGH);
    delay(500);
    digitalWrite(ledPin, LOW);
    delay(500);
    digitalWrite(ledPin, HIGH);
    delay(500);
    digitalWrite(ledPin, LOW);
    delay(1000);
      
    display.clearDisplay(); 
    display.setTextSize(2);
    display.setCursor(0,0); display.print(F("REMINDER:"));
    display.setCursor(0,16); display.print(F("Using the"));
    display.setCursor(0,32); display.print(F("last set"));
    display.setCursor(0,48); display.print(F("hand size"));
    display.display();
    delay(3500);

    display.clearDisplay();
    display.setCursor(0,8); display.print(F("Hold the"));
    display.setCursor(0,24); display.print(F("button at"));
    display.setCursor(0,40); display.print(F("any time"));
    display.display();
    delay(3000);

    display.clearDisplay();
    display.setCursor(0,8); display.print(F("to re-"));
    display.setCursor(0,24); display.print(F("calibrate"));
    display.setCursor(0,40); display.print(F("hand size"));
    display.display();
    delay(3000);
  }

  i++; // Incriment variable so welcome message doesn't run again

  if (myFlexSensor1.available() == true && myFlexSensor2.available() == true) { // Check sensors are available (need to do)
    angle = abs(myFlexSensor1.getX() - myFlexSensor2.getX()); // Find the angle between them
    diameter = sqrt(sq(finger1) + sq(finger2) - 2*finger1*finger2*cos(angle*PI/180)); // Convert to distance between fingertips
    display.clearDisplay();
    display.setTextSize(3); // Back to larger font
    if (diameter < 10) {
      display.setCursor(32,8); display.print(diameter); // Display diameter
    }
    if (diameter >= 10) {
      display.setCursor(16,8); display.print(diameter); // Display diameter
    }
    display.setCursor(48,32); display.print(F("CM"));
    display.display(); // Update display
    Serial.println("Total:");
    Serial.println(angle); // Print angle value to serial monitor as double check
    Serial.println("Each:");
    Serial.println(myFlexSensor1.getX());
    Serial.println(myFlexSensor2.getX());
  }

  // Check for calibration initiation
  if (digitalRead(buttonPin) == 0) { // If button press...
    currentState = 0;
    if (lastState == 1) { // And if last state was NOT press...
      startTime = millis();  // Store start time of button press
      lastState = currentState; // Reset last state
    }
  }

  if (digitalRead(buttonPin) == 1) { // If button NOT press...
    if (lastState == 0) {
       pressTime = millis() - startTime;
       lastState = currentState; // Reset last state
    }
    startTime = 0; // Reset start time of button press
    currentState = 1;
  }

  if (currentState == 0 && (millis() - startTime) >= holdTime) { // If button press AND hold time has been reached...
    while (digitalRead(buttonPin) == 0) { // Wait until user releases to prevent issues with calibration loop
      digitalWrite(ledPin,HIGH); // Turn LED on
      display.clearDisplay(); // Clear display
      display.display();
      }
    // Once they let go
    digitalWrite(ledPin,LOW); // Turn LED off
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0,16); display.print(F("Ready to"));
    display.setCursor(0,32); display.print(F("calibrate"));
    display.display();
    delay(3000);
    startTime = 0; // Reset values
    pressTime = 0;
    calibration(); // RUN CALIBRATION
    }  

if (pressTime >= tapTime && pressTime < holdTime) { // Check for tap larger than tap time but less than hold time
    pressTime = 0; // Reset values
    startTime = 0;
    digitalWrite(ledPin,HIGH); // Turn on LED as indicator
    display.clearDisplay();
    display.invertDisplay(true);
    display.setCursor(32,8); display.print(diameter); 
    display.setCursor(24,32); display.print(F("SAVED"));
    display.display();
    delay(1000);
    digitalWrite(ledPin,LOW); // Turn off LED as indicator
    display.clearDisplay();
    display.invertDisplay(false);
    display.display();
    delay(250);
  }
  
  delay(50);
}

void calibration() {
  // Start-up message
  display.clearDisplay();
  display.setTextSize(3);
  display.setCursor(8,8); display.print(F("Tap to"));
  display.setCursor(24,32); display.print(F("Begin"));
  display.display();
  
  while (digitalRead(buttonPin) == 1) { // Wait for button press
  // do nothing
  }

  while (digitalRead(buttonPin) == 0) {  // While held
    display.clearDisplay(); // Clear display
    display.display();
  }

  int j = 1; // Initialize some variables
  float sum1 = 0;
  float sum2 = 0;
  int k = 1;
  float cal[2][5][5];

  for (j = 1; j <=2; j++) {

    while (digitalRead(buttonPin) == 1) { // Wait for button press
      // Instruct ring 1
      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(0,0); display.print(F("Hold your"));
      display.setCursor(0,16); display.print(F("fingers in"));
      display.setCursor(0,32); display.print(F("ring"));
      display.setCursor(64,32); display.print(j);
      display.setCursor(0,48); display.print(F("and tap"));
      display.display();
    }  

    // Instruct to hold
    display.clearDisplay();
    display.setCursor(16,0); display.print(F("Hold for"));
    display.setCursor(8,16); display.print(F("5 seconds"));
    display.display();
    delay(2000);

    for (i = 1; i<= 5; i++) {
      display.clearDisplay();
      display.setTextSize(2);
      display.setCursor(16,0); display.print(F("Hold for"));
      display.setCursor(8,16); display.print(F("5 seconds"));
      display.setTextSize(3);
      display.setCursor(32,40); display.print(6-i);
      display.setCursor(48,40); display.print(F("..."));
      display.display();
      for (int k = 1; k <=5; k++) {
        if (myFlexSensor1.available() == true && myFlexSensor2.available() == true) { 
          angle = abs(myFlexSensor1.getX() - myFlexSensor2.getX()); // Find the angle between them
          cal[j][i][k] = angle; // Save the vales to calibration array
          Serial.println(j); // Some prints for checking things
          Serial.println(cal[j][i][k]);
          delay(200);
        }
      }
    k = 1;
    }
  i = 1;
  }

  for (i = 1; i <=5; i++) { // These loops just sum each of the two sets of data
    for (k = 1; k<=5; k++) { 
      sum1 = sum1 + cal[1][i][k];
      sum2 = sum2 + cal[2][i][k];
      Serial.println(sum1);
      Serial.println(sum2);
    }
  }

  float cal1Avg = sum1/(i*k); // Average each set of data
  float cal2Avg = sum2/(i*k);
  Serial.println("AVERAGE:"); // Some prints for checking
  Serial.println(cal1Avg);
  Serial.println(cal2Avg);
  
  // Calculate finger lengths (documentation for these equations given in appendices)
  
  float valK = cos(cal1Avg);
  float valJ = cos(cal2Avg);
  float valZ = (sq(ring1)*valJ - sq(ring2)*valK + sqrt(sq(sq(ring1)*valJ - sq(ring2)*valK) - sq(sq(ring2)-sq(ring1))))/(2*(valJ-valK));
  
  finger2 = sqrt(valZ);
  finger1 = sqrt((sq(ring1)*valJ - sq(ring2)*valK - sq(finger2)*(valJ-valK))/(valJ - valK)); 

  // Convert to byte then save to EEPROM
  
  int f1Byte = int((finger1 - minLength)/stepLength);
  int f2Byte = int((finger2 - minLength)/stepLength);
  EEPROM.write(0,f1Byte);
  EEPROM.write(1,f2Byte);

  // DONE, print message
  display.clearDisplay();
  display.setCursor(32,16); display.print(F("DONE"));
  display.drawLine(0,40,128,40,SSD1306_WHITE);
  display.display();
  delay(3000);
}
