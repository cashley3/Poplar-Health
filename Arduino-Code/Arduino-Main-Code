
//Library for running liquid crystal display
#include <LiquidCrystal.h> 

//Library for EEPROM (internal memory)
#include <EEPROM.h>

// Pin assignments
LiquidCrystal lcd(8,9,10,11,12,13); 
int buttonPin = 6;
int flexPin1 = A0;
int flexPin2 = A1;
int ledPin = 7;

int flexPin = A3;

// Start-up code initialization
int holdTime = 3000; // Set required hold time for button hold
int tapTime = 250;
int startTime = NAN; // Set start time at infinity to prevent it from being reached without setting the value
int currentState = 1; // Set both current and last state to 1 (OFF)
int lastState = 1;
int i = 1;
float diameter = 00.00;
float minDiam = 0;
float maxDiam = 10.5;
float stepDiam = (maxDiam - minDiam)/256;

// Calibration initialization
int cal11[50]; 
int cal12[50]; 
int cal21[50]; 
int cal22[50];  

float index = 7.5; // Hard code finger lengths in for the sake of this simulation
float middle = 8.5;

float angle1 = 0;
float angle2 = 0;
float angleTot = 0;
float minLength = 6;
float maxLength = 11;
float stepLength = (maxLength - minLength)/256;
float finger1 = 0;
float finger2 = 0;
int cell = 0;

void setup() { 
  
  //Miscellaneous Set-up Things
  lcd.begin(2,16); // Initialize LCD
  lcd.clear();
  pinMode(buttonPin, INPUT_PULLUP); // Set button pin to internal pull-up
  pinMode(ledPin, OUTPUT); // Set LED pin to output
  Serial.begin(9600); // Initialize serial monitor (just in case)
  
  // Reading in values from EEPROM
  cell = EEPROM.read(2); // Read in current cell assignment
  finger1 = ((EEPROM.read(0)) - minLength)/stepLength; // Get finger lengths
  finger2 = ((EEPROM.read(1)) - minLength)/stepLength;
}

void loop() { // Main loop  

  if (i == 1) {  // Welcome message to run once, 2 seconds between screens
    lcd.setCursor(4,0);
    lcd.print("Welcome!");
    digitalWrite(ledPin, HIGH); // Blink LED three times, 0.25 seconds per on/off
    delay(250);
    digitalWrite(ledPin, LOW);
    delay(250);
    digitalWrite(ledPin, HIGH);
    delay(250);
    digitalWrite(ledPin, LOW);
    delay(250);
    digitalWrite(ledPin, HIGH);
    delay(250);
    digitalWrite(ledPin, LOW);
    delay(750);
    lcd.clear();
    lcd.setCursor(3,0);
    lcd.print("Using Last"); // Remind how to begin calibration
    lcd.setCursor(1,1);
    lcd.print("Calibration...");
    delay(2000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Hold Button for");
    lcd.setCursor(0,1);
    lcd.print("5 Secs Any Time");
    delay(2000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("to Recalibrate!");
    delay(2000);
    lcd.clear();
  }
  
  i++; // Incriment variable so welcome message doesn't run again

  // Calculation for diameter
  float flexRead1 = analogRead(flexPin1);
  float flexRead2 = analogRead(flexPin2);
  angle1 = 0.0000254*sq(flexRead1)-0.0301*flexRead1 + 8.1349; // This equation was determined experimentally - converts voltage reading to angle
  angle2 = 0.0000254*sq(flexRead2)-0.0301*flexRead2 + 8.1349; 
  angleTot = abs(angle1 - angle2); // Find final angle between the two fingers
  diameter = sqrt(sq(finger1) + sq(finger2) - 2*finger1*finger2*cos(angleTot)); //  Calculate diameter from finger lengths and angle
  
  // Constant display of diameter
  lcd.setCursor(3,0); 
  lcd.print("Diameter:");
  lcd.setCursor(4,1);
  lcd.print(diameter);
  lcd.setCursor(9,1);
  lcd.print("cm");

  // Check for calibration initiation
  if (digitalRead(buttonPin) == 0) { // If button press...
    currentState = 0;
    if (lastState == 1) { // And if last state was NOT press...
      startTime = millis();  // Store start time of button press
      lastState = currentState; // Reset last state
    }
  }

  if (digitalRead(buttonPin) == 1) { // If button NOT press...
    currentState = 1;
    startTime = NAN; // Reset start time of button press
    if (lastState == 0) {
       lastState = currentState; // Reset last state
    }
  }

  if (currentState == 0 && (millis() - startTime) >= holdTime) { // If button press AND hold time has been reached...
    while (digitalRead(buttonPin) == 0) { // Clear screen until user releases to prevent issues with calibration loop
      lcd.clear();
      digitalWrite(ledPin,HIGH);
      }
    digitalWrite(ledPin,LOW);
    calibration(); // RUN CALIBRATION
    }  

  if (currentState == 0 && (millis() - startTime) >= tapTime) { // Check for tap
    digitalWrite(ledPin,HIGH); // Turn on LED as indicator
    int diamByte = int((diameter - minDiam)/stepDiam); // Convert diameter measurement to BYTE value
    EEPROM.write(cell,diamByte); // Save to EEPROM
    cell++; // Increment what cell to write to next time and update that in EEPROM
    EEPROM.update(2,cell);
    digitalWrite(ledPin,LOW); // Turn off LED as indicator
  }

}  
  
void calibration() { // Calibration function
  
  lcd.clear();
  
  // Calibration start message
  lcd.setCursor(2,0);
  lcd.print("Tap to Begin"); 
  lcd.setCursor(2,1);
  lcd.print("Calibration");

  while (digitalRead(buttonPin) == 1){ // Wait for button press
  	 // do nothing
  }
  
  while (digitalRead(buttonPin) == 0) { // Clear screen until user releases to prevent skipping next step
      lcd.clear();
  }
  
  while (digitalRead(buttonPin) == 1){ // Wait for button press
    lcd.setCursor(0,0);
    lcd.print("Hold Fingers in"); // Instruct step 1
    lcd.setCursor(0,1);
    lcd.print("Ring 1 and Tap");
    delay(10);
  }

  lcd.clear();
  lcd.setCursor(1,0);
  lcd.print("Hold 5 Seconds"); // Instruct start of 5 second countdown

  i = 1;  

  // Begin 5 second countdown
  lcd.setCursor(6,1); 
  lcd.print("5...");
    for (int i = 0; i <= 9; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal11[i] = analogRead(flexPin1);
      cal12[i] = analogRead(flexPin2);
      delay(100);
    }
  lcd.setCursor(6,1);
  lcd.print("4...");
    for (int i = 10; i <= 19; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal11[i] = analogRead(flexPin1);
      cal12[i] = analogRead(flexPin2);
      delay(100);
    }  
  lcd.setCursor(6,1);
  lcd.print("3...");
    for (int i = 20; i <= 29; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal11[i] = analogRead(flexPin1);
      cal12[i] = analogRead(flexPin2);
      delay(100);
    }
  lcd.setCursor(6,1);
  lcd.print("2...");
    for (int i = 30; i <= 39; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal11[i] = analogRead(flexPin1);
      cal12[i] = analogRead(flexPin2);
      delay(100);
    }
  lcd.setCursor(6,1);
  lcd.print("1...");
    for (int i = 40; i <= 49; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal11[i] = analogRead(flexPin1);
      cal12[i] = analogRead(flexPin2);
      delay(100);
    }

  lcd.clear();
  
	while (digitalRead(buttonPin) == 1){ // Wait for button press
      lcd.setCursor(0,0);
      lcd.print("Hold Fingers in"); // Instruct step 2
      lcd.setCursor(0,1);
      lcd.print("Ring 2 and Tap");
      delay(10);
	}

  lcd.clear();
  lcd.setCursor(1,0);
  lcd.print("Hold 5 Seconds"); // Instruct start of 5 second countdown

  i = 1;  

  // Begin 5 second countdown
  lcd.setCursor(6,1); 
  lcd.print("5...");
    for (int i = 0; i <= 9; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal21[i] = analogRead(flexPin1);
      cal22[i] = analogRead(flexPin2);
      delay(100);
    }
  lcd.setCursor(6,1);
  lcd.print("4...");
    for (int i = 10; i <= 19; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal21[i] = analogRead(flexPin1);
      cal22[i] = analogRead(flexPin2);
      delay(100);
    }  
  lcd.setCursor(6,1);
  lcd.print("3...");
    for (int i = 20; i <= 29; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal21[i] = analogRead(flexPin1);
      cal22[i] = analogRead(flexPin2);
      delay(100);
    }
  lcd.setCursor(6,1);
  lcd.print("2...");
    for (int i = 30; i <= 39; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal21[i] = analogRead(flexPin1);
      cal22[i] = analogRead(flexPin2);
      delay(100);
    }
  lcd.setCursor(6,1);
  lcd.print("1...");
    for (int i = 40; i <= 49; i++) { // For 1 second, collect 1 data point each 0.1 seconds
      cal21[i] = analogRead(flexPin1);
      cal22[i] = analogRead(flexPin2);
      delay(100);
    }  

  lcd.clear();  

  // Calculate finger lengths
  int sum11 = 0;  
  int sum12 = 0;  
  int sum21 = 0;  
  int sum22 = 0; 
  for (i = 0; i <= 49; i++) { // Sum up the 50 data points for each step
    sum11 = cal11[i] + sum11;
    sum12 = cal12[i] + sum12;
    sum21 = cal21[i] + sum21;
    sum22 = cal22[i] + sum22;
  }

  float cal11Avg = sum11/50; // Average the 50 data points
  float cal12Avg = sum12/50;
  float cal21Avg = sum21/50;
  float cal22Avg = sum22/50;

  // Convert to angles
  float calAngle11 = 0.0000254*sq(cal11Avg)-0.0301*cal11Avg + 8.1349; // This equation was determined experimentally - converts voltage reading to angle
  float calAngle12 = 0.0000254*sq(cal12Avg)-0.0301*cal12Avg + 8.1349;
  float calAngle21 = 0.0000254*sq(cal21Avg)-0.0301*cal21Avg + 8.1349;
  float calAngle22 = 0.0000254*sq(cal22Avg)-0.0301*cal22Avg + 8.1349;
  float calAngleTot1 = abs(calAngle11 - calAngle12); // Find final angle between the two fingers
  float calAngleTot2 = abs(calAngle21 - calAngle22);
  
  // Calculate finger lengths
  
  
  // Completion message
  lcd.setCursor(2,0);
  lcd.print("Calibration"); 
  lcd.setCursor(3,1);
  lcd.print("Complete!");
  digitalWrite(ledPin, HIGH); // Blink LED three times, 0.25 seconds per on/off
  delay(250);
  digitalWrite(ledPin, LOW);
  delay(250);
  digitalWrite(ledPin, HIGH);
  delay(250);
  digitalWrite(ledPin, LOW);
  delay(250);
  digitalWrite(ledPin, HIGH);
  delay(250);
  digitalWrite(ledPin, LOW);
  delay(750);
  lcd.clear();  
}

  // This then goes back to the main loop!
